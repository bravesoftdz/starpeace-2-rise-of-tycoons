unit BackUpMgr_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// PASTLWTR : 1.2
// File generated on 13/12/2004 14:04:48 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\starpeace\Source\Remote Admin\BackUpMgr.tlb (1)
// LIBID: {7E819380-5C05-11D4-8C56-0048546B6CD9}
// LCID: 0
// Helpfile: 
// HelpString: BackUpMgr Library
// DepndLst: 
//   (1) v1.0 stdole, (C:\WINDOWS\system32\stdole32.tlb)
// Errors:
//   Hint: Parameter 'i' of IBackUpManager.GetBackupName changed to 'i_'
//   Hint: Parameter 'idx' of IBackUpManager.SetCurrentBackup changed to 'idx_'
// ************************************************************************ //
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
interface

uses Windows, ActiveX, Classes, Graphics, StdVCL, Variants;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  BackUpMgrMajorVersion = 1;
  BackUpMgrMinorVersion = 0;

  LIBID_BackUpMgr: TGUID = '{7E819380-5C05-11D4-8C56-0048546B6CD9}';

  IID_IBackUpManager: TGUID = '{7E819381-5C05-11D4-8C56-0048546B6CD9}';
  CLASS_BackUpManager: TGUID = '{7E819382-5C05-11D4-8C56-0048546B6CD9}';
type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  IBackUpManager = interface;
  IBackUpManagerDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  BackUpManager = IBackUpManager;


// *********************************************************************//
// Interface: IBackUpManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7E819381-5C05-11D4-8C56-0048546B6CD9}
// *********************************************************************//
  IBackUpManager = interface(IDispatch)
    ['{7E819381-5C05-11D4-8C56-0048546B6CD9}']
    function Get_ServersDir: WideString; safecall;
    procedure Set_ServersDir(const ServersDir: WideString); safecall;
    procedure EnumBackups; safecall;
    function GetBackupName(i: Integer): WideString; safecall;
    function SetCurrentBackup(idx: Integer): WordBool; safecall;
    function Get_WorldName: WideString; safecall;
    procedure Set_WorldName(const WorldName: WideString); safecall;
    function Get_BackupCount: Integer; safecall;
    function GetBackupDate(i: Integer): WideString; safecall;
    function GetBackupSize(i: Integer): WideString; safecall;
    property ServersDir: WideString read Get_ServersDir write Set_ServersDir;
    property WorldName: WideString read Get_WorldName write Set_WorldName;
    property BackupCount: Integer read Get_BackupCount;
  end;

// *********************************************************************//
// DispIntf:  IBackUpManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7E819381-5C05-11D4-8C56-0048546B6CD9}
// *********************************************************************//
  IBackUpManagerDisp = dispinterface
    ['{7E819381-5C05-11D4-8C56-0048546B6CD9}']
    property ServersDir: WideString dispid 1;
    procedure EnumBackups; dispid 2;
    function GetBackupName(i: Integer): WideString; dispid 3;
    function SetCurrentBackup(idx: Integer): WordBool; dispid 4;
    property WorldName: WideString dispid 5;
    property BackupCount: Integer readonly dispid 6;
    function GetBackupDate(i: Integer): WideString; dispid 7;
    function GetBackupSize(i: Integer): WideString; dispid 8;
  end;

// *********************************************************************//
// The Class CoBackUpManager provides a Create and CreateRemote method to          
// create instances of the default interface IBackUpManager exposed by              
// the CoClass BackUpManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBackUpManager = class
    class function Create: IBackUpManager;
    class function CreateRemote(const MachineName: string): IBackUpManager;
  end;

implementation

uses ComObj;

class function CoBackUpManager.Create: IBackUpManager;
begin
  Result := CreateComObject(CLASS_BackUpManager) as IBackUpManager;
end;

class function CoBackUpManager.CreateRemote(const MachineName: string): IBackUpManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BackUpManager) as IBackUpManager;
end;

end.
