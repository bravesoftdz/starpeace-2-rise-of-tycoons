RDO (Remote Delphi Objects) tiene las siguientes limitantes:
- Los métodos de un RDO sólo pueden declarar parámetros constantes o por valor.
- Los métodos de un RDO sólo pueden declarar parámetros de los siguientes tipos:
  - Enteros de cualquier tamaño.
  - Booleans.
  - Flotantes de simple y doble precisión.
  - OLE strings (wide strings).

- Las funciones sólo pueden devolver valores de tipo variant.
- Las propiedades de un RDO pueden ser de los siguientes tipos:
  - Enteros de cualquier tamaño.
  - Booleans.
  - Flotantes de simple y doble precisión.
  - OLE strings (wide strings).
  - Delphi strings.
  - Variants.

- No se puede usar de forma remota objetos de la VCL (recuerden el Synchronize).
- Los métodos que usen objetos de la VCL deben usar Synchronize cada vez que quie
ran hacerlo.
- Es imprescindible que los módulos servidores y clientes de RDO hechos en Delphi
usen la unit ShareMem si usan RDO desde DLLs.

Además debe tenerse cuidado al invocar dichos métodos pués el compilador no está
haciendo chequeo de tipos y esto puede provocar errores catastróficos. Por ejemplo
el código siguiente podría ejecutar mal:

  type
    class
      TTest =
         procedure aTestMethod( aSingle : single );
      end;

  ...

  aTestObj.aTestMethod( 3.14 );

En este caso el Delphi por ejemplo asume que el parámetro real es de tipo "double"
pero el parámetro formal es "single" por lo que ocurre un error de ejecución. Otro
compilador podría asumir "single" y funcionaría pero es mejor asegurarse. Por ejemplo:

  type
    class
      TTest =
         procedure aTestMethod( aSingle : single );
      end;

  ...

  const
    PI : single = 3.14;

  ...

  aTestObj.aTestMethod( PI );

Nota: Si se sabe lo que está haciendo se puede pasar parámetros de otros tipos como
punteros a objetos (siempre que existan en el espacio de direcciones del RDO server),
pero esto es bastante peligroso.

.............english translation (froom google)


RDO (Remote Delphi Objects) has the following limitantes:
- The methods of a RDO only can declare constant parameters or by value.  
- The methods of a RDO only can declare parameters of the following types:    
  - Whole of any size.    
  - Booleans.    
  - Floating of simple and double precision.    
  - OLE strings (wide strings).    
- The functions only can give back values of type variant.  
- The properties of a RDO can be of the following types:    
  - Whole of any size.    
  - Booleans.    
  - Floating of simple and double precision.    
  - OLE strings (wide strings).    
  - Delphi strings.    
  - Variants.    
- It is not possible to be used of remote form objects of the VCL (they remember the Synchronize).  
- The methods that use objects of the VCL must use Synchronize whenever quie ran to do it.  
- It is essential that the modules servants and clients of RDO done in Delphi use unit ShareMem if they use RDO from DLLs.    

In addition it must have well-taken care of when invoking these methods because the compiler is not making control of types and this can cause catastrophic errors. For example the following code could execute badly:

      type
      class
        TTest =
           procedure aTestMethod (aSingle: single);
        end;
      …      aTestObj.aTestMethod (3.14);

In this case the Delphi for example assumes that the real parameter is of “double” type but the formal parameter is “single” reason why it happens an execution error. Another compiler could assume “single” and would work but he is better to make sure. For example:

      type
      class
        TTest =
           procedure aTestMethod (aSingle: single);
        end;
      …      const
      PI: single = 3.14;
      …      aTestObj.aTestMethod (PI);

Note: If one knows what it is doing is possible to be passed parameters of other types like leaders to objects (whenever they exist in the space of directions of the RDO server), but this is quite dangerous. 

