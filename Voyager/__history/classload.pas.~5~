unit classload;

interface
   uses MapTypes, VisualClassManager,BuildClasses,classes,sysutils;


   function loadclass : integer;
   function  ParseSoundData(const str : string) : TSoundData;

   published
    bsinfo            : PBuildingClass;
    ClassManager : TClassManager ;
    fBuildingClasses      : IBuildingClassBag;

implementation
  function ParseSoundData(const str : string) : TSoundData;
    var
      i   : integer;
      len : integer;
      aux : string;
      map : TStringList;
    begin
      map := TStringList.Create;
      try
        len := length(str);
        i := 1;
        while i <= len do
          begin
            aux := '';
            while str[i] = #32 do
              inc(i);
            while (i <= len) and (str[i] <> ',') do
              begin
                aux := aux + str[i];
                inc(i);
              end;
            inc(i);
            map.Add(aux);
          end;
        aux := map.Values['wave'];
        if aux <> ''
          then Result.wavefile := 'cache\Sound\' + aux
          else Result.wavefile := '';
        aux := map.Values['aten'];
        try
          if aux <> ''
            then Result.atenuation := StrToFloat(aux)
            else Result.atenuation := 1;
        except
          Result.atenuation := 1;
        end;
        aux := map.Values['prio'];
        try
          if aux <> ''
            then Result.priority := StrToInt(aux)
            else Result.priority := 0;
        except
          Result.priority := 0;
        end;
        aux := map.Values['loop'];
        try
          if aux <> ''
            then Result.looped := boolean(StrToInt(aux))
            else Result.looped := false;
        except
          Result.looped := false;
        end;
        aux := map.Values['prob'];
        try
          if aux <> ''
            then Result.probability := StrToFloat(aux)
            else Result.probability := 1;
        except
          Result.probability := 1;
        end;
        aux := map.Values['per'];
        try
          if aux <> ''
            then Result.period := StrToInt(aux)
            else Result.period := 0;
        except
          Result.period := 0;
        end;
      finally
        map.Free;
      end;
    end;

  function loadclass : integer;
    var
      stream : tstream;
      path : string;
      aux    : TBuildingClass;
      VCls   : VisualClassManager.TVisualClass;
      i      : integer;
      j      : integer;

     function ParseEfxData(const efxdata : string) : TEfxData;
      var
        i   : integer;
        len : integer;
        aux : string;
        map : TStringList;
      begin
        map := TStringList.Create;
        try
          len := length(efxdata);
          i := 1;
          while i <= len do
            begin
              aux := '';
              while efxdata[i] = #32 do
                inc(i);
              while (i <= len) and (efxdata[i] <> ',') do
                begin
                  aux := aux + efxdata[i];
                  inc(i);
                end;
              inc(i);
              map.Add(aux);
            end;
          aux := map.Values['id'];
          try
            if aux <> ''
              then Result.id := StrToInt(aux)
              else Result.id := -1;
          except
            Result.id := -1;
          end;
          aux := map.Values['x'];
          try
            if aux <> ''
              then Result.x := StrToInt(aux)
              else Result.x := 0;
          except
            Result.x := 0;
          end;
          aux := map.Values['y'];
          try
            if aux <> ''
              then Result.y := StrToInt(aux)
              else Result.y := 0;
          except
            Result.y := 0;
          end;
          Result.Options := [];
          aux := map.Values['animated'];
          try
            if (aux <> '') and (StrToInt(aux) = 1)
              then include(Result.Options, eoAnimated);
          except
          end;
          aux := map.Values['glassed'];
          try
            if (aux <> '') and (StrToInt(aux) = 1)
              then include(Result.Options, eoGlassed);
          except
          end;
        finally
          map.Free;
        end;
      end;
   function StrToBuildOption(const BuildOptAsStr : string) : TBuildOptions;
      const
        cBuildOptionNames : array [TBuildOptions] of string = ('default', 'land', 'water', 'both');
      begin
        Result := high(Result);
        while (Result > low(Result)) and (lowercase(BuildOptAsStr) <> cBuildOptionNames[Result]) do
          dec(Result);
      end;


    begin
      path   := 'cache\BuildingClasses\classes.bin';
      Stream := TFileStream.Create(path, fmOpenRead);
      fBuildingClasses := TBuildingClasses.Create;
      try
        ClassManager.Free;      //.rag
        ClassManager := TClassManager.Load(Stream);
        for i := 0 to pred(ClassManager.Count) do
          begin
            VCls := ClassManager.Classes[i];
            aux.id := VCls.Id;
            if not (aux.id <> high(aux.id))
              then raise Exception.Create('');
            aux.Size := VCls.ReadInteger('General', 'xSize', high(aux.Size));
            if not ((aux.Size >= 0) and (aux.Size < 32))
              then raise Exception.Create('');
            aux.Name := VCls.ReadString('General', 'Name', '');
            aux.ImagePath := VCls.ReadString('MapImages', '64x32x0', '');
            aux.Urban := VCls.ReadBool('General', 'Urban', false);
            aux.Accident := VCls.ReadBool('General', 'Accident', false);
            aux.ZoneType := VCLs.ReadInteger('General', 'Zone', 0);
            aux.FacId := VCLs.ReadInteger('General', 'FacId', 0);
            aux.Requires := VCLs.ReadInteger('General', 'Requires', 0);
            aux.VoidSquares := VCLs.ReadInteger('General', 'VoidSquares', 0);
            aux.HideColor := VCLs.ReadInteger('General', 'HideColor', clBlack);
            aux.Selectable := VCLs.ReadBool('General', 'Selectable', true);
            aux.BuildOpts := StrToBuildOption(VCLs.ReadString('General', 'BuildOptions', 'default'));
            aux.Animated := VCls.ReadBool('General', 'Animated', false);
            aux.LevelSignX := VCLs.ReadInteger('General', 'LevelSignX', low(integer));
            aux.LevelSignY := VCLs.ReadInteger('General', 'LevelSignY', low(integer));
            aux.AnimArea.Left := VCLs.ReadInteger('Animations', 'Left', 0);
            aux.AnimArea.Top := VCLs.ReadInteger('Animations', 'Top', 0);
            aux.AnimArea.Right := VCLs.ReadInteger('Animations', 'Right', 0);
            aux.AnimArea.Bottom := VCLs.ReadInteger('Animations', 'Bottom', 0);
            with aux.SoundData do
              begin
                Count := VCLs.ReadInteger('Sounds', 'Count', 0);
                if Count > 0
                  then
                    begin
                      Kind := TSoundSetKind(VCLs.ReadInteger('Sounds', 'Kind', 0));
                      getmem(Sounds, Count*sizeof(Sounds[0]));
                      initialize(Sounds^, Count);
                      for j := 0 to pred(Count) do
                        Sounds[j] := ParseSoundData(VCLs.ReadString('Sounds', IntToStr(j), ''));
                    end
                  else
                    begin
                      Kind := ssNone;
                      Sounds := nil;
                    end;
              end;
            with aux.EfxData do
              begin
                Count := VCLs.ReadInteger('Effects', 'Count', 0);
                if Count > 0
                  then
                    begin
                      getmem(Efxs, Count*sizeof(Efxs[0]));
                      for j := 0 to pred(Count) do
                        Efxs[j] := ParseEfxData(VCLs.ReadString('Effects', IntToStr(j), ''));
                    end
                  else Efxs := nil;
              end;
            fBuildingClasses.Add(aux);
          end;
      finally
        Stream.Free;
      end;
    end;   
end.
